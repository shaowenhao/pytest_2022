{"name": "test_case[case_data1]", "status": "broken", "statusDetails": {"message": "TypeError: log() missing 1 required positional argument: 'msg'", "trace": "case_data = {'assert_expression': ['\"运单创建成功\"==\"$.msg\"'], 'case_name': '录单', 'data': {'lu_dan_ren': '小江', 'waybill_no': 'lj520'}, 'extract_key': None, ...}\n\n    @pytest.mark.parametrize('case_data',ReadFile.read_case('case/test.yaml'))\n    def test_case(case_data):\n        logger.info(f'用例初始信息{case_data}')\n        print(case_data)\n>       assert case_assert_result(case_data)\n\ntool\\test_case.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntool\\case.py:36: in case_assert_result\n    assert_r = Assert.assert_response(api_response, case_data['assert_expression'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tool.assert_.Assert'>\napi_response = {'msg': '运单创建成功', 'waybill_info': {'lu_dan_ren': '小江', 'waybill_no': 'lj520'}}\nassert_list = ['\"运单创建成功\"==\"$.msg\"']\n\n    @classmethod\n    def assert_response(cls, api_response:dict, assert_list:list):\n        '''\n        :param api_response:  {'ig':'theshy','code':200}\n        :param assert_list:\n        :return:\n        '''\n        new_assert_list = []\n        logger.info(f'初始的断言列表{assert_list}')\n    \n        for i in assert_list:\n            if '$.' in i:\n                # String find 查找  获取$的索引位置\n                wz = i.find('$')\n                #切片出表达式\n                assert_json_path = i[wz:len(i)-1]\n                #把表达式转化为值\n                value = jsonpath(api_response,assert_json_path)\n                if not value:\n                    print('表达式提取失败，请检查')\n                    return False\n                #得到的结果是放在列表里的 [theshy]\n                value = value[0]\n                #用值把表达式替换掉\n                i = i.replace(assert_json_path,value)\n            new_assert_list.append(i)\n            #到这步位置 结果变成 [\"'12' in '123'\", '\"ig\" == \"theshy\"']\n        logger.info(f'替换完成后的断言列表{new_assert_list}')\n        assert_result_list = []\n        for i in new_assert_list:\n            assert_result = eval(i)\n            assert_result_list.append(assert_result)\n            #变成[True,False]\n        print(new_assert_list)\n    \n>       logger.log(f'最终断言结果{assert_result_list}')\nE       TypeError: log() missing 1 required positional argument: 'msg'\n\ntool\\assert_.py:46: TypeError"}, "attachments": [{"name": "log", "source": "65ee966c-d36c-4fec-a774-7389bd325363-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'path': '/lu_dan', 'method': 'post', 'remark': '录单，使用运单号', 'is_run': True, 'data': {'waybill_no': '$.waybill_no', 'lu_dan_ren': '小江'}, 'extract_key': None, 'assert_expression': ['\"运单创建成功\"==\"$.msg\"'], 'case_name': '录单'}"}], "start": 1667374094944, "stop": 1667374094955, "uuid": "1231fd23-10f5-4b3b-ad4e-4d587d4b18e1", "historyId": "aac020bc3d563f838788cd876e224fba", "testCaseId": "759719059e6bbe3a97f8ac510d2ec550", "fullName": "tool.test_case#test_case", "labels": [{"name": "parentSuite", "value": "tool"}, {"name": "suite", "value": "test_case"}, {"name": "subSuite"}, {"name": "host", "value": "md2t20bc"}, {"name": "thread", "value": "24540-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tool.test_case"}]}